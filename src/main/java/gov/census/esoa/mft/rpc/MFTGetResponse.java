/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package gov.census.esoa.mft.rpc;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class MFTGetResponse extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4518145067660105889L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MFTGetResponse\",\"namespace\":\"gov.census.esoa.mft.rpc\",\"fields\":[{\"name\":\"clientId\",\"type\":\"string\"},{\"name\":\"fileName\",\"type\":\"string\"},{\"name\":\"offset\",\"type\":\"long\"},{\"name\":\"body\",\"type\":\"bytes\"},{\"name\":\"remainingSize\",\"type\":\"long\"},{\"name\":\"totalSize\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<MFTGetResponse> ENCODER =
      new BinaryMessageEncoder<MFTGetResponse>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<MFTGetResponse> DECODER =
      new BinaryMessageDecoder<MFTGetResponse>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<MFTGetResponse> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<MFTGetResponse> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<MFTGetResponse>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this MFTGetResponse to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a MFTGetResponse from a ByteBuffer. */
  public static MFTGetResponse fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence clientId;
  @Deprecated public java.lang.CharSequence fileName;
  @Deprecated public long offset;
  @Deprecated public java.nio.ByteBuffer body;
  @Deprecated public long remainingSize;
  @Deprecated public long totalSize;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MFTGetResponse() {}

  /**
   * All-args constructor.
   * @param clientId The new value for clientId
   * @param fileName The new value for fileName
   * @param offset The new value for offset
   * @param body The new value for body
   * @param remainingSize The new value for remainingSize
   * @param totalSize The new value for totalSize
   */
  public MFTGetResponse(java.lang.CharSequence clientId, java.lang.CharSequence fileName, java.lang.Long offset, java.nio.ByteBuffer body, java.lang.Long remainingSize, java.lang.Long totalSize) {
    this.clientId = clientId;
    this.fileName = fileName;
    this.offset = offset;
    this.body = body;
    this.remainingSize = remainingSize;
    this.totalSize = totalSize;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return clientId;
    case 1: return fileName;
    case 2: return offset;
    case 3: return body;
    case 4: return remainingSize;
    case 5: return totalSize;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: clientId = (java.lang.CharSequence)value$; break;
    case 1: fileName = (java.lang.CharSequence)value$; break;
    case 2: offset = (java.lang.Long)value$; break;
    case 3: body = (java.nio.ByteBuffer)value$; break;
    case 4: remainingSize = (java.lang.Long)value$; break;
    case 5: totalSize = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'clientId' field.
   * @return The value of the 'clientId' field.
   */
  public java.lang.CharSequence getClientId() {
    return clientId;
  }

  /**
   * Sets the value of the 'clientId' field.
   * @param value the value to set.
   */
  public void setClientId(java.lang.CharSequence value) {
    this.clientId = value;
  }

  /**
   * Gets the value of the 'fileName' field.
   * @return The value of the 'fileName' field.
   */
  public java.lang.CharSequence getFileName() {
    return fileName;
  }

  /**
   * Sets the value of the 'fileName' field.
   * @param value the value to set.
   */
  public void setFileName(java.lang.CharSequence value) {
    this.fileName = value;
  }

  /**
   * Gets the value of the 'offset' field.
   * @return The value of the 'offset' field.
   */
  public java.lang.Long getOffset() {
    return offset;
  }

  /**
   * Sets the value of the 'offset' field.
   * @param value the value to set.
   */
  public void setOffset(java.lang.Long value) {
    this.offset = value;
  }

  /**
   * Gets the value of the 'body' field.
   * @return The value of the 'body' field.
   */
  public java.nio.ByteBuffer getBody() {
    return body;
  }

  /**
   * Sets the value of the 'body' field.
   * @param value the value to set.
   */
  public void setBody(java.nio.ByteBuffer value) {
    this.body = value;
  }

  /**
   * Gets the value of the 'remainingSize' field.
   * @return The value of the 'remainingSize' field.
   */
  public java.lang.Long getRemainingSize() {
    return remainingSize;
  }

  /**
   * Sets the value of the 'remainingSize' field.
   * @param value the value to set.
   */
  public void setRemainingSize(java.lang.Long value) {
    this.remainingSize = value;
  }

  /**
   * Gets the value of the 'totalSize' field.
   * @return The value of the 'totalSize' field.
   */
  public java.lang.Long getTotalSize() {
    return totalSize;
  }

  /**
   * Sets the value of the 'totalSize' field.
   * @param value the value to set.
   */
  public void setTotalSize(java.lang.Long value) {
    this.totalSize = value;
  }

  /**
   * Creates a new MFTGetResponse RecordBuilder.
   * @return A new MFTGetResponse RecordBuilder
   */
  public static gov.census.esoa.mft.rpc.MFTGetResponse.Builder newBuilder() {
    return new gov.census.esoa.mft.rpc.MFTGetResponse.Builder();
  }

  /**
   * Creates a new MFTGetResponse RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MFTGetResponse RecordBuilder
   */
  public static gov.census.esoa.mft.rpc.MFTGetResponse.Builder newBuilder(gov.census.esoa.mft.rpc.MFTGetResponse.Builder other) {
    return new gov.census.esoa.mft.rpc.MFTGetResponse.Builder(other);
  }

  /**
   * Creates a new MFTGetResponse RecordBuilder by copying an existing MFTGetResponse instance.
   * @param other The existing instance to copy.
   * @return A new MFTGetResponse RecordBuilder
   */
  public static gov.census.esoa.mft.rpc.MFTGetResponse.Builder newBuilder(gov.census.esoa.mft.rpc.MFTGetResponse other) {
    return new gov.census.esoa.mft.rpc.MFTGetResponse.Builder(other);
  }

  /**
   * RecordBuilder for MFTGetResponse instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MFTGetResponse>
    implements org.apache.avro.data.RecordBuilder<MFTGetResponse> {

    private java.lang.CharSequence clientId;
    private java.lang.CharSequence fileName;
    private long offset;
    private java.nio.ByteBuffer body;
    private long remainingSize;
    private long totalSize;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(gov.census.esoa.mft.rpc.MFTGetResponse.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.clientId)) {
        this.clientId = data().deepCopy(fields()[0].schema(), other.clientId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fileName)) {
        this.fileName = data().deepCopy(fields()[1].schema(), other.fileName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.offset)) {
        this.offset = data().deepCopy(fields()[2].schema(), other.offset);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.body)) {
        this.body = data().deepCopy(fields()[3].schema(), other.body);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.remainingSize)) {
        this.remainingSize = data().deepCopy(fields()[4].schema(), other.remainingSize);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.totalSize)) {
        this.totalSize = data().deepCopy(fields()[5].schema(), other.totalSize);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing MFTGetResponse instance
     * @param other The existing instance to copy.
     */
    private Builder(gov.census.esoa.mft.rpc.MFTGetResponse other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.clientId)) {
        this.clientId = data().deepCopy(fields()[0].schema(), other.clientId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fileName)) {
        this.fileName = data().deepCopy(fields()[1].schema(), other.fileName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.offset)) {
        this.offset = data().deepCopy(fields()[2].schema(), other.offset);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.body)) {
        this.body = data().deepCopy(fields()[3].schema(), other.body);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.remainingSize)) {
        this.remainingSize = data().deepCopy(fields()[4].schema(), other.remainingSize);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.totalSize)) {
        this.totalSize = data().deepCopy(fields()[5].schema(), other.totalSize);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'clientId' field.
      * @return The value.
      */
    public java.lang.CharSequence getClientId() {
      return clientId;
    }

    /**
      * Sets the value of the 'clientId' field.
      * @param value The value of 'clientId'.
      * @return This builder.
      */
    public gov.census.esoa.mft.rpc.MFTGetResponse.Builder setClientId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.clientId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'clientId' field has been set.
      * @return True if the 'clientId' field has been set, false otherwise.
      */
    public boolean hasClientId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'clientId' field.
      * @return This builder.
      */
    public gov.census.esoa.mft.rpc.MFTGetResponse.Builder clearClientId() {
      clientId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'fileName' field.
      * @return The value.
      */
    public java.lang.CharSequence getFileName() {
      return fileName;
    }

    /**
      * Sets the value of the 'fileName' field.
      * @param value The value of 'fileName'.
      * @return This builder.
      */
    public gov.census.esoa.mft.rpc.MFTGetResponse.Builder setFileName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.fileName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'fileName' field has been set.
      * @return True if the 'fileName' field has been set, false otherwise.
      */
    public boolean hasFileName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'fileName' field.
      * @return This builder.
      */
    public gov.census.esoa.mft.rpc.MFTGetResponse.Builder clearFileName() {
      fileName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'offset' field.
      * @return The value.
      */
    public java.lang.Long getOffset() {
      return offset;
    }

    /**
      * Sets the value of the 'offset' field.
      * @param value The value of 'offset'.
      * @return This builder.
      */
    public gov.census.esoa.mft.rpc.MFTGetResponse.Builder setOffset(long value) {
      validate(fields()[2], value);
      this.offset = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'offset' field has been set.
      * @return True if the 'offset' field has been set, false otherwise.
      */
    public boolean hasOffset() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'offset' field.
      * @return This builder.
      */
    public gov.census.esoa.mft.rpc.MFTGetResponse.Builder clearOffset() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'body' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getBody() {
      return body;
    }

    /**
      * Sets the value of the 'body' field.
      * @param value The value of 'body'.
      * @return This builder.
      */
    public gov.census.esoa.mft.rpc.MFTGetResponse.Builder setBody(java.nio.ByteBuffer value) {
      validate(fields()[3], value);
      this.body = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'body' field has been set.
      * @return True if the 'body' field has been set, false otherwise.
      */
    public boolean hasBody() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'body' field.
      * @return This builder.
      */
    public gov.census.esoa.mft.rpc.MFTGetResponse.Builder clearBody() {
      body = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'remainingSize' field.
      * @return The value.
      */
    public java.lang.Long getRemainingSize() {
      return remainingSize;
    }

    /**
      * Sets the value of the 'remainingSize' field.
      * @param value The value of 'remainingSize'.
      * @return This builder.
      */
    public gov.census.esoa.mft.rpc.MFTGetResponse.Builder setRemainingSize(long value) {
      validate(fields()[4], value);
      this.remainingSize = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'remainingSize' field has been set.
      * @return True if the 'remainingSize' field has been set, false otherwise.
      */
    public boolean hasRemainingSize() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'remainingSize' field.
      * @return This builder.
      */
    public gov.census.esoa.mft.rpc.MFTGetResponse.Builder clearRemainingSize() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalSize' field.
      * @return The value.
      */
    public java.lang.Long getTotalSize() {
      return totalSize;
    }

    /**
      * Sets the value of the 'totalSize' field.
      * @param value The value of 'totalSize'.
      * @return This builder.
      */
    public gov.census.esoa.mft.rpc.MFTGetResponse.Builder setTotalSize(long value) {
      validate(fields()[5], value);
      this.totalSize = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'totalSize' field has been set.
      * @return True if the 'totalSize' field has been set, false otherwise.
      */
    public boolean hasTotalSize() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'totalSize' field.
      * @return This builder.
      */
    public gov.census.esoa.mft.rpc.MFTGetResponse.Builder clearTotalSize() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public MFTGetResponse build() {
      try {
        MFTGetResponse record = new MFTGetResponse();
        record.clientId = fieldSetFlags()[0] ? this.clientId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.fileName = fieldSetFlags()[1] ? this.fileName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.offset = fieldSetFlags()[2] ? this.offset : (java.lang.Long) defaultValue(fields()[2]);
        record.body = fieldSetFlags()[3] ? this.body : (java.nio.ByteBuffer) defaultValue(fields()[3]);
        record.remainingSize = fieldSetFlags()[4] ? this.remainingSize : (java.lang.Long) defaultValue(fields()[4]);
        record.totalSize = fieldSetFlags()[5] ? this.totalSize : (java.lang.Long) defaultValue(fields()[5]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<MFTGetResponse>
    WRITER$ = (org.apache.avro.io.DatumWriter<MFTGetResponse>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<MFTGetResponse>
    READER$ = (org.apache.avro.io.DatumReader<MFTGetResponse>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
